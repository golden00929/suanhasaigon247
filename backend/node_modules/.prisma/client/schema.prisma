generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("EMPLOYEE")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quotations Quotation[]

  @@map("users")
}

model Customer {
  id              String    @id @default(cuid())
  customerName    String?
  companyName     String?
  phone           String?
  email           String?
  memo            String?
  lastContactDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  addresses  CustomerAddress[]
  quotations Quotation[]

  @@map("customers")
}

model CustomerAddress {
  id         String  @id @default(cuid())
  name       String
  address    String
  isMain     Boolean @default(false)
  customerId String

  // Relations
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  quotations Quotation[]

  @@map("customer_addresses")
}

model PriceCategory {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items PriceCategoryItem[]

  @@map("price_categories")
}

model PriceCategoryItem {
  id         String  @id @default(cuid())
  itemName   String
  unit       String
  unitPrice  Float
  laborHours Float   @default(0)
  isActive   Boolean @default(true)
  categoryId String

  // Relations
  category       PriceCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  quotationItems QuotationItem[]

  @@map("price_category_items")
}

model Quotation {
  id              String    @id @default(cuid())
  quotationNumber String    @unique
  status          String    @default("DRAFT")
  materialCost    Float     @default(0)
  laborCost       Float     @default(0)
  travelCost      Float     @default(0)
  marginRate      Float     @default(15)
  subtotal        Float     @default(0)
  tax             Float     @default(0)
  total           Float     @default(0)
  sentAt          DateTime?
  validUntil      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Foreign Keys
  customerId        String
  customerAddressId String
  createdBy         String

  // Relations
  customer        Customer        @relation(fields: [customerId], references: [id])
  customerAddress CustomerAddress @relation(fields: [customerAddressId], references: [id])
  createdByUser   User            @relation(fields: [createdBy], references: [id])
  items           QuotationItem[]

  @@map("quotations")
}

model QuotationItem {
  id             String  @id @default(cuid())
  itemName       String
  quantity       Float
  unitPrice      Float
  amount         Float
  quotationId    String
  categoryItemId String?

  // Relations
  quotation    Quotation          @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  categoryItem PriceCategoryItem? @relation(fields: [categoryItemId], references: [id])

  @@map("quotation_items")
}
